#include<stdio.h>
#include<stdlib.h>

#define _USE_MATH_DEFINES
#include <math.h>
#include <vector>

#include <IL/il.h>

#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glew.h>
#include <GL/glut.h>
#endif


float camX = 00, camY = 30, camZ = 40;
int startX, startY, tracking = 0;

int alpha = 0, beta = 45, r = 50;

unsigned int t, tw, th;
unsigned char* imageData;

GLuint vertices;
GLuint verticeCount;

float startInner = 0;
float startOuter = 0;



float h(float x, float z) {
	float x1 = floor(x); 
	float x2 = x1 + 1;
	float z1 = floor(z); 
	float z2 = z1 + 1;

	float fx = x - x1; // 0 <= fx <= 1
	float fz = z - z1; // 0 <= fz <= 1

	float h_x1_z = h(x1,z1) * (1-z) + h(x1,z2) * z;
	float h_x2_z = h(x2,z1) * (1-z) + h(x2,z2) * z;

	float height_xz = h_x1_z * (1 - x) + h_x2_z * x;

	return height_xz;
}

void drawTerrain() {

    // colocar aqui o código de desnho do terreno usando VBOs com TRIANGLE_STRIPS
	glPushMatrix();
	glTranslatef(-(float)tw / 2, 0,-(float)th / 2);
	glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
	glBindBuffer(GL_ARRAY_BUFFER, vertices);
	glVertexPointer(3, GL_FLOAT, 0, 0);
	for (int i = 0;i < th - 1;i++)
		glDrawArrays(GL_TRIANGLE_STRIP, i * (tw * 2), tw * 2);
	glPopMatrix();
}

void drawTeapotOuter(float radius, float alpha, int flag){
    double posX = radius * cos(alpha*M_PI/180);
    double posZ = radius * sin(alpha*M_PI/180);
    if (flag == 0){
        glPushMatrix();
        glTranslatef(posX, 2, posZ);
        glRotatef(-alpha, 0, 1, 0);
        glColor3f(0.8f, 0.2f, 0.2f);
        glutSolidTeapot(2);
        glPopMatrix();
    }

}

void drawTeapotFront(float radius, float alpha, float inc){
    double posX = radius * cos(alpha*M_PI/180);
    double posZ = radius * sin(alpha*M_PI/180);

    glPushMatrix();
    glRotatef(inc, 0, 1, 0);
    glTranslatef(posX, 2, posZ);
    glColor3f(0.2f, 0.2f, 0.8f);
    glutSolidTeapot(4);
    glPopMatrix();
}


void changeSize(int w, int h) {

	// Prevent a divide by zero, when window is too short
	// (you cant make a window with zero width).
	if(h == 0)
		h = 1;

	// compute window's aspect ratio 
	float ratio = w * 1.0 / h;

	// Reset the coordinate system before modifying
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	
	// Set the viewport to be the entire window
    glViewport(0, 0, w, h);

	// Set the correct perspective
	gluPerspective(45,ratio,1,1000);

	// return to the model view matrix mode
	glMatrixMode(GL_MODELVIEW);
}


void renderScene(void) {

	float pos[4] = {-1.0, 1.0, 1.0, 0.0};

	glClearColor(0.0f,0.0f,0.0f,0.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glLoadIdentity();
	gluLookAt(camX, camY, camZ, 
		      0.0,0.0,0.0,
			  0.0f,1.0f,0.0f);

	drawTerrain();
	drawTeapotOuter(30, startInner + i*inc, 0);
	drawTeapotFront(60, startOuter + i*inc, inc);

	// just so that it renders something before the terrain is built
	// to erase when the terrain is ready
	//glutWireTeapot(2.0);

// End of frame
	glutSwapBuffers();
}



void processKeys(unsigned char key, int xx, int yy) {

// put code to process regular keys in here
}



void processMouseButtons(int button, int state, int xx, int yy) {
	
	if (state == GLUT_DOWN)  {
		startX = xx;
		startY = yy;
		if (button == GLUT_LEFT_BUTTON)
			tracking = 1;
		else if (button == GLUT_RIGHT_BUTTON)
			tracking = 2;
		else
			tracking = 0;
	}
	else if (state == GLUT_UP) {
		if (tracking == 1) {
			alpha += (xx - startX);
			beta += (yy - startY);
		}
		else if (tracking == 2) {
			
			r -= yy - startY;
			if (r < 3)
				r = 3.0;
		}
		tracking = 0;
	}
}


void processMouseMotion(int xx, int yy) {

	int deltaX, deltaY;
	int alphaAux, betaAux;
	int rAux;

	if (!tracking)
		return;

	deltaX = xx - startX;
	deltaY = yy - startY;

	if (tracking == 1) {


		alphaAux = alpha + deltaX;
		betaAux = beta + deltaY;

		if (betaAux > 85.0)
			betaAux = 85.0;
		else if (betaAux < -85.0)
			betaAux = -85.0;

		rAux = r;
	}
	else if (tracking == 2) {

		alphaAux = alpha;
		betaAux = beta;
		rAux = r - deltaY;
		if (rAux < 3)
			rAux = 3;
	}
	camX = rAux * sin(alphaAux * 3.14 / 180.0) * cos(betaAux * 3.14 / 180.0);
	camZ = rAux * cos(alphaAux * 3.14 / 180.0) * cos(betaAux * 3.14 / 180.0);
	camY = rAux * 							     sin(betaAux * 3.14 / 180.0);
}


void init() {
	ilGenImages(1, &t);
	ilBindImage(t);
	// terreno.jpg is the image containing our height map
	ilLoadImage((ILstring)"terreno.jpg");
	// convert the image to single channel per pixel
	// with values ranging between 0 and 255
	ilConvertImage(IL_LUMINANCE, IL_UNSIGNED_BYTE);
	// important: check tw and th values
	// both should be equal to 256
	// if not there was an error loading the image
	// most likely the image could not be found
	tw = ilGetInteger(IL_IMAGE_WIDTH);
	th = ilGetInteger(IL_IMAGE_HEIGHT);
	// imageData is a LINEAR array with the pixel values
	imageData = ilGetData();
	


// 	Build the vertex arrays
	std::vector<float> array;
	//printf("%d %d\n", th, tw);
	for (int i = 0;i < th-1;i++)
		for (int j = 0;j < tw;j++)
		{
			array.push_back(j);
			array.push_back(imageData[i*th+j]);
			array.push_back(i );
			array.push_back(j);
			array.push_back(imageData[(i+1)*th+j]);
			array.push_back((i + 1));
		}

	glBindBuffer(GL_ARRAY_BUFFER, vertices);
	glBufferData(
		GL_ARRAY_BUFFER, // tipo do buffer, s� � relevante na altura do desenho
		sizeof(float) * array.size(), // tamanho do vector em bytes
		array.data(), // os dados do array associado ao vector
		GL_STATIC_DRAW); // i
	verticeCount = array.size()/3;
	printf("%d\n", array.size()/3);

// 	OpenGL settings
	glEnable(GL_DEPTH_TEST);
	//glEnable(GL_CULL_FACE);
}


int main(int argc, char **argv) {

// init GLUT and the window
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DEPTH|GLUT_DOUBLE|GLUT_RGBA);
	glutInitWindowPosition(100,100);
	glutInitWindowSize(1920,1024);
	glutCreateWindow("CG@DI-UM");
		

// Required callback registry 
	glutDisplayFunc(renderScene);
	glutIdleFunc(renderScene);
	glutReshapeFunc(changeSize);

// Callback registration for keyboard processing
	glutKeyboardFunc(processKeys);
	glutMouseFunc(processMouseButtons);
	glutMotionFunc(processMouseMotion);
#ifndef __APPLE__
	glewInit();
#endif

	glEnableClientState(GL_VERTEX_ARRAY);
	glGenBuffers(1, &vertices);
	ilInit();

	init();	

// enter GLUT's main cycle
	glutMainLoop();
	
	return 0;
}

